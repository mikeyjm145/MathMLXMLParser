module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { Expression: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          function(first, rest) {
                return combine(first, rest, {
                  "=": function(left, right) { return left + toMathMLOperator("=") + right; }
                });
              },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          function(first, rest) {
                return combine(first, rest, {
                  "+": function(left, right) { return left + toMathMLOperator("+") + right; },
                  "-": function(left, right) { return left + toMathMLOperator("-") + right; }
                });
              },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          function(first, rest) {
                return combine(first, rest, {
                  "*": function(left, right) { return left + toMathMLOperator("*") + right; },
                  "/": function(left, right) { return toMathMLFraction(toMathMLRow(left) + toMathMLRow(right)); }
                });
              },
          "^",
          { type: "literal", value: "^", description: "\"^\"" },
          function(first, rest) {
                return combine(first, rest, {
                  "^": function(left, right) { return toMathMLPostscript(left, right); }
                });
              },
          "_",
          { type: "literal", value: "_", description: "\"_\"" },
          function(first, rest) {
                return combine(first, rest, {
                  "_": function(left, right) { return toMathMLPrescript(left, right); }
                });
              },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          function(expr) { return toMathMLParenthesis("(", expr,")", ""); },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          function(expr) { return toMathMLParenthesis("[", expr,"]", ""); },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function(expr) { return toMathMLParenthesis("|", expr,"|", ""); },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          function(expr) { return toMathMLParenthesis("", expr,"", ""); },
          "#{",
          { type: "literal", value: "#{", description: "\"#{\"" },
          function(expr) { return toMathMLSquareRoot(expr); },
          "#",
          { type: "literal", value: "#", description: "\"#\"" },
          function(first, second, last, expr) { return toMathMLNthRoot(expr, second); },
          "log",
          { type: "literal", value: "log", description: "\"log\"" },
          "cbrt",
          { type: "literal", value: "cbrt", description: "\"cbrt\"" },
          "sin",
          { type: "literal", value: "sin", description: "\"sin\"" },
          "cos",
          { type: "literal", value: "cos", description: "\"cos\"" },
          "tan",
          { type: "literal", value: "tan", description: "\"tan\"" },
          "asin",
          { type: "literal", value: "asin", description: "\"asin\"" },
          "acos",
          { type: "literal", value: "acos", description: "\"acos\"" },
          "atan",
          { type: "literal", value: "atan", description: "\"atan\"" },
          "sinh",
          { type: "literal", value: "sinh", description: "\"sinh\"" },
          "cosh",
          { type: "literal", value: "cosh", description: "\"cosh\"" },
          "tanh",
          { type: "literal", value: "tanh", description: "\"tanh\"" },
          function(expr1, expr2) {return toMathSingleParamMethod(true, expr1, expr2)},
          { type: "other", description: "integer" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function() { return toMathMLNumber(text()); },
          { type: "other", description: "identifier" },
          /^[a-zA-Z]/,
          { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
          function() { return toMathMLIdentifier(text()); },
          { type: "other", description: "Prescript" },
          /^[_]/,
          { type: "class", value: "[_]", description: "[_]" },
          function() { return text(); },
          { type: "other", description: "whitespace" },
          /^[ \t\n\rz]/,
          { type: "class", value: "[ \\t\\n\\r\\z]", description: "[ \\t\\n\\r\\z]" }
        ],

        peg$bytecode = [
          peg$decode(";!"),
          peg$decode("%;\"/\x8F#$%;2/D#2 \"\"6 7!/5$;2/,$;!/#$+$)($'#(#'#(\"'#&'#0N*%;2/D#2 \"\"6 7!/5$;2/,$;!/#$+$)($'#(#'#(\"'#&'#&/)$8\":\"\"\"! )(\"'#&'#"),
          peg$decode("%;#/\xA7#$%;2/P#2#\"\"6#7$.) &2%\"\"6%7&/5$;2/,$;\"/#$+$)($'#(#'#(\"'#&'#0Z*%;2/P#2#\"\"6#7$.) &2%\"\"6%7&/5$;2/,$;\"/#$+$)($'#(#'#(\"'#&'#&/)$8\":'\"\"! )(\"'#&'#"),
          peg$decode("%;$/\xA7#$%;2/P#2(\"\"6(7).) &2*\"\"6*7+/5$;2/,$;#/#$+$)($'#(#'#(\"'#&'#0Z*%;2/P#2(\"\"6(7).) &2*\"\"6*7+/5$;2/,$;#/#$+$)($'#(#'#(\"'#&'#&/)$8\":,\"\"! )(\"'#&'#"),
          peg$decode("%;%/\x8F#$%;2/D#2-\"\"6-7./5$;2/,$;$/#$+$)($'#(#'#(\"'#&'#0N*%;2/D#2-\"\"6-7./5$;2/,$;$/#$+$)($'#(#'#(\"'#&'#&/)$8\":/\"\"! )(\"'#&'#"),
          peg$decode("%;&/\x8F#$%;2/D#20\"\"6071/5$;2/,$;%/#$+$)($'#(#'#(\"'#&'#0N*%;2/D#20\"\"6071/5$;2/,$;%/#$+$)($'#(#'#(\"'#&'#&/)$8\":2\"\"! )(\"'#&'#"),
          peg$decode(";'.G &;(.A &;).; &;*.5 &;../ &;0.) &;/.# &;+"),
          peg$decode("%23\"\"6374/@#; /7$25\"\"6576/($8#:7#!!)(#'#(\"'#&'#"),
          peg$decode("%28\"\"6879/@#; /7$2:\"\"6:7;/($8#:<#!!)(#'#(\"'#&'#"),
          peg$decode("%2=\"\"6=7>/@#; /7$2=\"\"6=7>/($8#:?#!!)(#'#(\"'#&'#"),
          peg$decode("%2@\"\"6@7A/@#; /7$2B\"\"6B7C/($8#:D#!!)(#'#(\"'#&'#"),
          peg$decode("%2E\"\"6E7F/@#; /7$2B\"\"6B7C/($8#:G#!!)(#'#(\"'#&'#"),
          peg$decode("%2H\"\"6H7I/[#;//R$2@\"\"6@7A/C$; /:$2B\"\"6B7C/+$8%:J%$$#\"!)(%'#($'#(#'#(\"'#&'#"),
          peg$decode("2K\"\"6K7L.\x95 &2M\"\"6M7N.\x89 &2O\"\"6O7P.} &2Q\"\"6Q7R.q &2S\"\"6S7T.e &2U\"\"6U7V.Y &2W\"\"6W7X.M &2Y\"\"6Y7Z.A &2[\"\"6[7\\.5 &2]\"\"6]7^.) &2_\"\"6_7`"),
          peg$decode("%;-.# &;0/n#23\"\"6374/_$;2/V$; .) &;0.# &;//A$;2/8$25\"\"6576/)$8&:a&\"%\")(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode("<%$4c\"\"5!7d/,#0)*4c\"\"5!7d&&&#/& 8!:e! )=.\" 7b"),
          peg$decode("<%$4g\"\"5!7h/,#0)*4g\"\"5!7h&&&#/& 8!:i! )=.\" 7f"),
          peg$decode("<%4k\"\"5!7l/& 8!:m! )=.\" 7j"),
          peg$decode("<%$4o\"\"5!7p0)*4o\"\"5!7p&/& 8!:m! )=.\" 7n")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }


      function combine(first, rest, combiners) {
        var result = first;
        var i = 0;
        for (i = 0; i < rest.length; i++) {
          result = combiners[rest[i][1]](result, rest[i][3]);
        }

        return result;
      }

      function toMathML(value) {
        var startOfResult = result = "<math mode='display' xmlns='http://www.w3.org/1998/Math/MathML'>\n<mrow>";

        var endOfResult = "</mrow>\n</math>";

        return startOfResult + value + endOfResult;
      }

      function toMathMLOperator(operator) {
        switch(operator){
          case '*': return "<mo>x</mo>\n";break;
          case '+': return "<mo>+</mo>\n";break;
          case '-': return "<mo>-</mo>\n";break;
          case '=': return "<mo>=</mo>\n";break;
          default: return "";
        }
      }

      function toMathMLNumber(number) {
        return "<mn>" + number + "</mn>\n";
      }

      function toMathMLIdentifier(identifier) {
        return "<mi>" + identifier + "</mi>\n";
      }

      function toMathMLRow(values) {
        return "<mrow>\n" + values + "</mrow>\n";
      }

      function toMathMLFraction(value) {
        return "<mfrac>\n" + value + "</mfrac>\n";
      }

      function toMathMLSquareRoot(value) {
        return "<msqrt>\n" + value + "</msqrt>\n";
      }

      function toMathMLNthRoot(value, rootValue) {
        return "<mroot>\n" + toMathMLRow(value) + rootValue + "</mroot>\n";
      }

      function toMathMLPostscript(postbase, postsuper) {
        return "<msup>\n" + postbase + postsuper + "</msup>\n";
      }

      function toMathMLPrescript(presub, presuper) {
        return "<msub>\n" + presub + presuper + "</msub>\n";
      }

      function toMathMLMultiScript(base, postsub, postsuper, presub, presuper) {
        return 
          "<mmultiscripts>\n" + base + "\n" + toMathMLPostscript(postsub, postsuper) + toMathMLPrescript(presub, presuper) + "</mmultiscripts>\n";
      }

      function toMathMLIntegral(start, end) {
        /*
            Come up with math operator for integral sign
        */
        return "<msubsup>" + "<mo>&#x222B;</mo>\n" + start + "\n" + end + "\n" + "</msubsup>\n";
      }

      function toMathMLMover(value) {
        return "<mover accentover='true'>" + toMathMLRow(value) + "<mo>&#x23DE;</mo>\n" + "</mover>\n";
      }

      function toMathMLMunder(value) {
        return "<munder accentunder='true'>" + toMathMLRow(value) + "<mo>&#x23DE;</mo>\n" + "\n" + "</munder>\n";
      }

      function toMathMLParenthesis(symbolBegin, value, symbolEnd, separators) {
        return "<mtext>"+ symbolBegin +"</mtext>\n" + value + "<mtext>"+ symbolEnd +"</mtext>\n";
      }
      
      function toMathMLFunction(value) {
        return "<mfunc>"+ value +"</mfunc>\n";
      }
      
      var _singleParamFunctions_ = [
            "log",
            "cbrt",
            "sin", "cos", "tan",
            "asin", "acos", "atan",
            "sinh", "cosh", "tanh"
          ];
          
      function toMathSingleParamMethod(par, funcName, expr) {
        if (!par) {
        	return "This is not a valid implementaion of a Math formula.\n";
        }

        if (funcName == null) {
          return "Please use supported Math formulas.\n";
        }

        if (expr == null) {
          return "Must include one numbers/expressions bewteen parenthises.\n";
        }

        if (_singleParamFunctions_.indexOf(funcName) === -1)  {
          return "This is not a supported Math formula.\n";
        }

        if (expr.length <= 10) {
          return "Must include one numbers/expressions bewteen parenthises.\n";
        }

      	return formatSingleParamFunction(funcName, expr);
      }

      function formatSingleParamFunction(funcName, expr) {
      	switch(funcName) {
      		case "log": return toMathMLFraction(toMathMLRow(toMathMLFunction("log") + toMathMLParenthesis("(", expr, ")", "")) + toMathMLRow(toMathMLFunction("log") + toMathMLParenthesis("(", toMathMLIdentifier("e"), ")", ""))); break;
      		default: return toMathMLFunction(funcName) + toMathMLParenthesis("(", expr, ")", ""); break;
      	}
      }


    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
